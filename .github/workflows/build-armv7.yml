name: Build Node-RED ARMv7 with contrib nodes

on:
  schedule:
    - cron: '0 3 * * *'
  workflow_dispatch:

env:
  IMAGE_NAME: ipc-nodered
  TARGET_PLATFORM: linux/arm/v7

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install tools
        run: sudo apt-get install -y jq curl

      - name: Resolve latest versions
        id: version-check
        run: |
          get_latest() {
            npm show "$1" version 2>/dev/null || echo "not-found"
          }

          NODERED=$(curl -s "https://registry.hub.docker.com/v2/repositories/nodered/node-red/tags?page_size=100" \
            | jq -r '.results[].name' \
            | grep -E '^[0-9]+\.[0-9]+(\.[0-9]+)?$' \
            | sort -Vr | head -n1)

          V_S7=$(get_latest node-red-contrib-s7)
          V_SPB=$(get_latest node-red-contrib-mqtt-sparkplug-plus)
          V_OPCUA=$(get_latest node-red-contrib-opcua)
          V_OPCDA=$(get_latest node-red-contrib-opcda-client)
          V_MODBUS=$(get_latest node-red-contrib-modbus)
          V_SQLITE=$(get_latest @malysus/node-red-contrib-better-sqlite)
          V_INFLUX=$(get_latest node-red-contrib-influxdb)

          echo "ðŸ”§ Aktuelle Versionen:"
          echo "  Node-RED: $NODERED"
          echo "  S7: $V_S7"
          echo "  SparkplugB: $V_SPB"
          echo "  OPC UA: $V_OPCUA"
          echo "  OPC DA: $V_OPCDA"
          echo "  Modbus: $V_MODBUS"
          echo "  SQLite: $V_SQLITE"
          echo "  InfluxDB: $V_INFLUX"

          echo "NODERED_VERSION=$NODERED" >> $GITHUB_ENV

          if [ -f .node-versions.json ]; then
            cmp <(jq -S . .node-versions.json) <(jq -S -n \
              --arg nr "$NODERED" \
              --arg s7 "$V_S7" \
              --arg spb "$V_SPB" \
              --arg opcua "$V_OPCUA" \
              --arg opcda "$V_OPCDA" \
              --arg modbus "$V_MODBUS" \
              --arg sqlite "$V_SQLITE" \
              --arg influx "$V_INFLUX" \
              '{
                "node-red": $nr,
                "node-red-contrib-s7": $s7,
                "node-red-contrib-mqtt-sparkplug-plus": $spb,
                "node-red-contrib-opcua": $opcua,
                "node-red-contrib-opcda-client": $opcda,
                "node-red-contrib-modbus": $modbus,
                "@malysus/node-red-contrib-better-sqlite": $sqlite,
                "node-red-contrib-influxdb": $influx
              }') && SKIP="true" || SKIP="false"
          else
            SKIP="false"
          fi

          echo "skip=$SKIP" >> $GITHUB_OUTPUT

          # immer aktuelle Datei erzeugen
          jq -S -n \
            --arg nr "$NODERED" \
            --arg s7 "$V_S7" \
            --arg spb "$V_SPB" \
            --arg opcua "$V_OPCUA" \
            --arg opcda "$V_OPCDA" \
            --arg modbus "$V_MODBUS" \
            --arg sqlite "$V_SQLITE" \
            --arg influx "$V_INFLUX" \
            '{
              "node-red": $nr,
              "node-red-contrib-s7": $s7,
              "node-red-contrib-mqtt-sparkplug-plus": $spb,
              "node-red-contrib-opcua": $opcua,
              "node-red-contrib-opcda-client": $opcda,
              "node-red-contrib-modbus": $modbus,
              "@malysus/node-red-contrib-better-sqlite": $sqlite,
              "node-red-contrib-influxdb": $influx
            }' > .node-versions.json


      - name: Set up Docker Buildx
        if: steps.version-check.outputs.skip != 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: steps.version-check.outputs.skip != 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image for ARMv7
        if: steps.version-check.outputs.skip != 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ env.TARGET_PLATFORM }}
          push: true
          provenance: false
          build-args: |
            NODERED_VERSION=${{ env.NODERED_VERSION }}
          tags: |
            ghcr.io/${{ github.repository }}:${{ env.NODERED_VERSION }}
            ghcr.io/${{ github.repository }}:latest

      - name: Commit updated version info
        if: steps.version-check.outputs.skip != 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .nodered-version .node-versions.json
          git commit -m "Update versions to Node-RED $NODERED_VERSION"
          git push
